class LRUCache {
public:
    map<int,int>m;
    map<int,list<int>::iterator>address;
    list<int>l;
    int cap;
    int siz;
    LRUCache(int capacity) {
        cap = capacity;
        siz = 0;
    }
    
    int get(int key) {
        // phle hm check krenge ki key present h ya nhi
        // agr present hoga to ussko last se delete krke front me push krenge 
        if(m.find(key) == m.end())return -1;
        list<int>::iterator it = address[key];
        l.erase(it);
        address.erase(key);
        l.push_front(key);
        address[key] = l.begin();
        return m[key];
    }
    
    void put(int key, int value) {
        // phle check krenge key present h ya nhi 
        // agr h to usko delete krenge or new wala insert krenge
        if(m.find(key) != m.end()){
            l.erase(address[key]);
            address.erase(key);
            m.erase(key);
            siz--;
        }
        //agr size barabar h capacity ke to last wale ko delete krke newkey ko front me add krooo
        if(siz == cap){
        int k = l.back();
        l.pop_back();
        address.erase(k);
        m.erase(k);
        siz--;
        }
        siz++;
        l.push_front(key);
        address[key] = l.begin();
        m[key] = value;
    }
};

